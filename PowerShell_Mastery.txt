Powershell Mastery

Comments - 
          Single line - #
          Multi Line - <# <text> #>

Variable -
          $var = 10
          $var
          $var.GetType().Name
           
          $var = 'It's a string'
          Local Variable - $var = 100
          Global variable = $Global:var = 100
          Print output = Write-Output $var
          Print output in file = $var | Out-File <location/filename.txt>
          remove data in variable = Clear-Variable -Name <variablename>
          Remove variable = Remove-Variable -Name <variablename>

Array - 
          Create an array - $arr = 1,2,3
          Output Array - $arr
          Create Empty Powershell Array - $arr = @()
          Create DataType Specific Array - [int[]]$arr = 1,2,3
          Check length of array - $arr.Length
          Check value exist in array - $arr.Contains(1)
          Clear the array - $arr = $null
          Array List - $arr = New-Object System.Collections.ArrayList
          To operate on array we need to convert it to array list
          Convert array to array list - [System.COllections.ArrayList]$arrlist = $arr
          Add data to arraylist - $arrlist.Add("4")
                                  $arrlist
          Remove data from arraylist - $arrlist.Add("2")
                                       $arrlist
          Check length of arraylist - $arrlist.Count
          Print array - $arrlist | Write-Output
          Array Index - $arr = 10,20,30
                        $arr[2]
                        Output - 30
          Multidimensional Array - 
                                 Create a md array - 
                                                   $mdarr = @()
                                 Add Data to MultiDimensional Array - 
                                                   $mdarr += @('Sunject1','Math','90')
                                                   $mdarr += @('Sunject2','English','90')
                                 Print The multidimensional Array - 
                                                   foreach($arr in $mdarr){
                                                   Write-Host ($arr)
                                                   }

Operator and flow control-
          Addition -
                    3+7
          Substraction -
                    3-7
          Multiplication -
                    7*3
          Division -
                    7/3
          Modulo - 
                    7%3
          Concatenate 2 strings - 
                    $var1 = "Powershell"
                    $var2 = "Training"
                    $var3 = $var1 + $var2
                    Write-Output $var3
          Concatenate 2 hash table -
                    $hash1 = @{"one"=1}
                    $hash2 = @{"two"=2}
                    $hash3 = $hash1 + $hash2
                    Write-Output $hash3
          Array Concatenation - 
                    $arr1 = @("one",1)
                    $arr2 = @("two",2)
                    $arr3 = $arr1 + $arr2
                    Write-Output $arr3
          Copy String - 
                    Write-Output "============================"
                    Write-Output "Powershell"
                    Write-Output "============================"
                              OR ELSE USE LIKE THIS
                    Write-Output ("=" * 50)
                    Write-Output "Powershell"
                    Write-Output ("=" * 50)
          Comparison Operators - 
                    -eq = equalto
                              2 -eq 2
                    -ne = notequalto
                              3 -ne 2
                    -ge = Greater than or equal
                              4 -ge 4
                    -gt = Greater than
                              
                    -lt = Less than
                    -le = Less than equal to
                    -like = Wildcard operator = used to find which words have 1st word available in 2nd word or not
                              "PowerShell","Computer","Shell" -like "*Shell"
                              Output = Powershell
                                       Shell
                    -notlike = Wildcard operator = used to find which word doesnot have 1st word available in 2nd word or not
                              "PowerShell","Computer","Shell" -like "*Shell"
                              Output = Computer
                    -contains = Wildcard operator = If 1st contain 2nd output true
                              "PowerShell","Computer","Shell" -contains "*Shell"
                              Output = True
          Logical Operators - 
                    AND = -and
                              (3 -eq 3) -and (5 -gt -4)
                              Output = true
                    OR = -or
                              (3 -eq 3) -or (5 -lt -4)
                    NOT = -not
                              -not((3 -eq 3) -and (5 -gt -4))
                    NOT = !
          Flow Control - 
                    If and Else -
                              if(Get-Process -Name notepad){
                                        Write-Output("Notepad is running")
                              }
                              else{
                                        Write-Output("Notepad is not running")
                              }
                    Switch - 
                              $temp = 30
                              switch($temp){
                              {$_ -lt 32 } {Write-Output("Below Freezing");break}          
                              {$_ -lt 50 } {Write-Output("Cold");break}  
                              {$_ -lt 70 } {Write-Output("Warm");break}  
                              default{"Hot"}
                              }
LOOPS - 
          For Loop -
                    $arr = 10,20,30,40
                    for ($i=0;i -lt 5;$i++){
                              Write-Output("Array $1 value: $arr[i]")
                    }
          For-Each Loop - 
                    $users = "Mukesh" , "John" , "Max"
                    ForEach($user in $users){
                              Write-Output("User: "$users")
                    }
          While Loop - 
                    $num = 1
                    While($num -le 10){
                              Write-Output $num
                              $um++
                    }
